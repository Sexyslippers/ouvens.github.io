---
layout: post
title:  "现代前端体系-第四章 1-前端脚本技术"
date:  2016-08-10
author: ouven
tags: 现代前端体系 第四章 1-前端脚本技术
categories: modern-frontend
cover: "assets/category/type-javascript.png"
---

### 第四章 1-前端脚本技术

#### 4.1.1 coffeescript时代

&emsp;&emsp;尽管目前很少有人再提起coffeescript，但coffeescript代表着前端脚本语言曾经的一段辉煌。coffeescript是一套JavaScript语法转义的语言。既然有了JavaScript和EcmaAcript规范，为什么还有coffeeScript？早在JavaScript规范轮乱的时代，最多敢用EcmaScript标准来开发大型应用，但是EcmaScript5的设计是很糟糕的。例如全局变量、作用域this、函数参数数组对象(到底是数组还是对象)、没有类、不定义'strict'可以随便乱写都不出错、语法声明冗繁等特点。有很多ecmascript5是如何糟糕的讨论这里就不展开了。

&emsp;&emsp;因此创建者Jeremy Ashkenas其实是借鉴了其它部分语言简洁、开发高效的特性，来重定义一套语法规则，然后转成规范可读、严格模式下的JavaScript代码。例如

```
#赋值:
number=1
opposite=true
 
#条件:
number=-1 if opposite
 
#函数:
square=(x)->x*x
 
#数组:
list=[1,2,3]
 
#存在性:
alert"I knew it!" if elvis?
 
#数组推导(comprehensions):
cubes=(math.cube num for num in list)

```

&emsp;&emsp;了解es6的人肯定知道这是箭头函数，当然不止这些。coffeescript定义了一整套完整的语法转义规则，其定义的简洁语法和转义后更严谨安全的代码自然而然受到很多开发者的青睐。甚至有人想做另一个JVM(javascript virtual machine)，用来直接运行coffeescript，可见曾经coffeescript是怎样的盛极一时。笔者也曾维护过一个基于coffeeScript的项目，整个项目完全使用coffeeScript实现，路由地址配置多达7000多行。足以让我们明白它曾在开发中心中的地位

&emsp;&emsp;随着EcmaScript6版本的出现，更加标准的规范和同样类似的高效特性，又让coffeeScript逐渐走向没落。

#### 4.1.2 EcmaScript标准

&emsp;&emsp;我们在第一章第三节介绍了Ecmascirpt的发展，这里简单回顾下Ecmascirpt的发展。

- 1999年12月 EcmaScript3发布，主要定义了ecmascript的一些常用对象和条件控制语法，例如正则表达式，新的控制指令，异常处理，错误定义更加明确，数输出的格式化等。

- 2009年12月发布, 具体先来看下EcmaScript 5,主要包括严格模式、JSON对象、新增Object接口、新增Array接口、Function.prototype.bind。

- 2015年6年17日，EcmaScript 6正式发布。主要添加了类型规范、String模板、解构、arrow函数、类、迭代和生产器、集合、promise等特性

- 目前，ES7的草案确定，主要添加了sleep、await原生异步处理机制。

&emsp;&emsp;兼容性方面，node已基本支持到ES6(93%支持)，最新的chrome 52以上已完全支持ES6，并添加了ES7特性。

&emsp;&emsp;工程开发使用中，是浏览器实践是仍然需要借助babel等编译工具将ES6语法编译生成ES5运行。弄得nodejs端使用较新版的版本即可使用ES6的常用功能。


#### 4.1.3 Typescript

&emsp;&emsp;Typescript是微软2012年推出的自由开源编程语言，是JavaScript的一个超集，尽管EcmaScript新标准和草案不断推出，TypeScript也依然存在，同时也获得不少追捧者。只是TypeScript除了部分自己的特点，依然主要EcmaScript6+的规范。

&emsp;&emsp;相对于EcmaScript 6, TypeScript也具有一些典型区别。

- 例如泛型支持。变量的强类型保证编程更加安全并能在编辑器中进行关联操作。

- 修饰符(Decorators)。主要借鉴了Angular，Ember和Aurelia的建议

&emsp;&emsp;除此之外，大部分依然与EcmaScript 6保持一致。为此越来越多的开发者在邂逅TypeScript概念的欣喜之余也开始反省，它到底能到来多大的好处？为什么在复制EcmaScript 6的支持的基础上加上这些没有太大优势的特性。当然，作者个人觉得后面TypeScript的处境会比较尴尬。


#### 4.1.4 javascript衍生脚本

&emsp;&emsp;什么是JavaScript的衍生脚本。目前可以理解为基于JavaScript的实现扩展自己特有语法脚本来适应自己特有场景的一种脚本规范。可以理解为JavaScript的超集，需要特性的额外解析器来辅助解析执行。均可以理解为JavaScript的超集，例如jsx和hyperScript，coffeeScript和TypeScript某种意义上也是如此。当然以后可能会出现其它新的脚本来适应相对应的场景。

&emsp;&emsp;例如jsx的官方声明使用它的原因是定义简洁且我们熟知的包含属性的树状结构语法。类似于HTML，但不完全一样。而hyperscript是一中用于创建virtual Dom(虚拟dom是用来描述HTML DOM节点之间属性和对应关系的另一种方式的JavaScript对象，通常内存里是一个接送对象，通过特定的规则可以与原有HTML DOM进行对应的转换，后面章节会展开介绍)的DSL(描述性脚本语言)，也是JavaScript的一种超集。

&emsp;&emsp;可以不同的JavaScript衍生脚本都有一些共性：

- 基于JavaScript
- 是JavaScript的超集
- 适用于特定的场景
- 具有自己的规范

&emsp;&emsp;或者可以认为，任何一种语言的新的版本都可以是前一版本的衍生脚本。但最终是否遵循语言的长期发展规范也决定这这个衍生脚本规范能否继续下去。
