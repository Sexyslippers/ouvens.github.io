---
layout: post
title:  "现代前端体系-第三章 1-前端开发调试工具"
date:  2016-08-05
author: ouven
tags: 现代前端体系 第三章 1-前端开发调试工具
categories: modern-frontend
cover: "assets/category/type-javascript.png"
---

### 1-前端开发调试工具


#### 3.1 前端开发工具

&emsp;&emsp;当然开发还的从最基本的编辑器说起，就前端而言主流的开发工具主要是sublime、webstorm、vscode、vim...当然你可能要说没有列出你认为优秀的编辑工具，我们后面再来说这个问题。就这四种而言我先做个简单的对比吧。

|---|---|---|
| editor | advantage | disadvantage |
|---|---|---|
| sublime | 较轻量有插件齐全的开发工具，扩展工具覆盖非常全面 | 没有自动自带debug和端点功能 |
| webstorm | 自带较全面的开发工具，也可以选择扩展,可使用命令行或断点 | 相对重量级，部分机器启动较慢 |
| vscode | 较轻量级，原生支持es6,typescript，关联断点调试非常方便，也可扩展 | 相对全面性稍弱，但还是很完整的 |
| vim | linux下可选的高效工具，脱鼠操作 | 入门相对难，没有前端对应的高效插件辅助工具 |

&emsp;&emsp;这里只是简单看看一些主流的开发编辑工具，当然很有很多未列出来的。但无论哪一种选择，我想一款高效的开发工具必须具有以下辅助能力。

- format能力。自动按照默认或设定的规范格式化html，js/es/typescript, css/scss等，免得我们自己去调不规范的格式
- snippet能力。例如快捷键 + tab自动生成待码块或文档注释能力，不用手动输入重复代码或注释
- 错误检测能力。例如各种lint，hint自动提示html、js、css不规范的提示能力，辅助更规范的开发
- 编辑快捷键能力。我想基本所有的工具都具有，不过越全越好。
- 自动debug能力。现在大多浏览器能提供这一能力，每个人也可以按需选择。最新的chrome也支持ES6,typescript调试。
- git或svn扩展能力。根据选择需要，绑定的git或svn的一个坏处是可能因为操作失误自动提交了不想提交的代码,当然关git或svn这里就不展开了
- 自动文档工具。开发的过程中尽量保留文档，但是我们因为没有时间去写，如果编辑器插件能帮我们自动高效生成代码文档就最好了

&emsp;&emsp;很多时候其实无法满足这些所有的功能，那就要根据我们的核心需要了，每个人的核心需求不同，选择也不同，所有每个人都会认为自己的工具是最好的。但无论怎样，好的工具的核心特点是高效开发，而不是工具本身的功能性，过多的关注本身的功能也会感觉过度了。

&emsp;&emsp;当然在我们开始敲键盘之前，最好确认下我们的编辑工具是否具有以上这几点高效的特点。但如果你还没有使用到这些扩展的辅助功能，那么赶紧去完善工具，工欲善其事必先利其器。

#### 3.2 前端调试工具

**前端快速开发工具**

&emsp;&emsp;通常前端开发过程中使用最多的调试工具为chrome浏览器，早期使用fireFox调试较多，目前使用的人已经极少了，偶尔会考虑下页面在FireFox的兼容性问题。

&emsp;&emsp;chrome虽然作为一款浏览器，但是要了解使用chrome所有的开发调试技巧也是极多的，打开控制台后尽量保证自己对里面95%以上的操作了解，这样就基本可以运用自如了，例如断点、网络、sources查看等(不一一列举)。当然处理普通的debug和模拟移动设备功能，chrome还提供了移动真实设备的inspect查看功能，地址栏输入`chrome://inspect/#devices`即可打开查看主机连接的移动设备的网页情况阅读dom和debug信息。

&emsp;&emsp;当然chrome的扩展功能还有很多有意思的东西，打开chrome://chrome-urls/就可以知道所有chrome支持的扩展功能信息，包括浏览器有UI界面入口的内容

```
chrome://version/  	//查看系统信息
chrome://inspect/	//查看连接设备调试信息
chrome://downloads	//浏览器下载管理
chrome://settings/	//浏览器设置
...
```

&emsp;&emsp;当然也不是说使用chrome就够了，毕竟我们的页面还需要兼容IE,Firefox等浏览器，使用chrome只是作为我们前期更高效的开发。

**node调试工具**

&emsp;&emsp;这里讲node调试工具的原因是因为nodejs开发被作者列为现代前端体系的一部分，后面也有章节重点介绍，所以这里有必要这里了解下node的开发调试。

&emsp;&emsp;服务端开发调试的工具也比较多。例如node-supervisor，node-inspector等或者以后出现的新工具。这类工具使用入门很简单，安装后用它们特定的命令启动应用入口文件(例如index.js)就可以了，这里node会启动一个远程可访问的网络端口，开发者通过浏览器可以对node的文件查看并可进行打断点等功能，之所以能这样做的原因是浏览器可以将代码分成不同的部分通过开启的端口发送到node上执行，这样就做到了node端代码和浏览器调试代码的一个同步功能。

&emsp;&emsp;也可以同其它服务端语言开发一样，通过写log文件的方式进行辅助开发。

例如:


**网络辅助工具**

&emsp;&emsp;前端开发中不得不提的一个开发辅助工具就是fiddler，应该基本上都用过。其工作的基本原理是在本地起一个代理服务，将特定的网络请求服务进行特定的处理，来模拟我们需要的不同场景。其实很像一个本地的nginx服务器。除了获取本机的网络请求，还能作为其它设备的网络代理，截获其它设备的请求，这样我们移动端开发时的请求就可以通过配置fiddler代理来实现了。

&emsp;&emsp;另外还有人做了一个willow的fiddler插件来来实现更强的代理替换规则，例如路径替换、特性dns替换、host等等。建议也可以去了解使用下。

**其它远程工具**

&emsp;&emsp;除了这些一般的开发调试方式，也有一些例如vorlon.js、Weinre等远程调试工具。原理跟node-inspect类似不过，原理是将远程的机器上的代码发送到开发机器的模拟浏览器上逐行执行，同时开发机模拟浏览器上的操作也回馈给远程的机器，例如在浏览器上选中一个div元素，这是，vorlon或weinre起的node服务会通知将远程机器上对应的这个元素加上一个高亮边框等特定的操作。相对于node-inspect，这里的远程的机器是前端页面，而不是nodejs环境。

&emsp;&emsp;讲到这么多的开发调试工具，也可能并不一定会用到，具体根据个人的喜好来选择。因为其实更多时候我们的bug使我们可控的，大多数问题都是与业务相关的需求变更或不确定，及时大部分比较隐晦的问题通过`debugger`断点就可以搞定了。


