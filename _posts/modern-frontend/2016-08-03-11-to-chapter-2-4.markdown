---
layout: post
title:  "现代前端体系-第二章 4-交互协议规范rest"
date:  2016-08-02
author: ouven
tags: 现代前端体系 4-交互协议规范rest
categories: modern-frontend
cover: "assets/category/type-javascript.png"
---

### 第二章 4-交互协议规范rest

&emsp;&emsp;相信大家多多少少听说过rest，和rest并存的是早期的websevice，当然webservice现在基本都不用了，它定义了一种冗长难读的xml来定义网络协议接口，而rest则大大简化了这个工作

&emsp;&emsp;通俗来说rest是一种协议规范，相信大家都有过这样的经历：在我们开发前端的时候和后台同学商量前后台的数据协议命名，例如对于书籍book的操作，有增删改查操作，与时我们用`path/addBook`、`path/deleteBook`、`path/updateBook`、`path/getBook`,好像没什么问题，又一个项目的接口定义却可能叫做`path/appendBook`、`path/delBook`、`path/modifyBook`、`path/getBooks`，后来有一天leader说接口要升级来满足新的需求，我们又机智的添加了`path/addBook2`、`path/deleteBook2`、`path/updateBook2`、`path/getBook2`。与时项目交接给了另一个前端同学和后台同学。结果他们跳起来了，写的什么鬼，一会叫这个，一会叫那个。

&emsp;&emsp;或许对于你来所，使用add或append或者后面添加1、2、3都没有问题，但是对于你要将你的项目转给你的"继承者"，请千万不要做。原因就不所了，大家基本都懂，作者本身也是资深"继承者"。

&emsp;&emsp;这是后我们或许会考虑使用文档啊，规范一定要使用add来添加，新的接口版本后放前面`path/v2/addBook`，开发的人严格按照文档规范去写。这样做挺好的，但依然不够好，几个原因。一是你可能没什么时间去写文档，或者后面接手的人不想去看文档; 二是，无论文档写的多清楚，我们总是看不懂的，而且效率低。

&emsp;&emsp;早在HTTP 1.1协议发布的时候其实就考虑了这些问题，在rest形式的Web服务中，每个资源都有一个地址。资源本身都是方法调用的目标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括HTTP GET、POST、PUT、DELETE，还可能包括HEADER和OPTIONS。所以我们完全可以充分利用rest规范的特性来重新新定义上面遇到的问题。

|----|----|----|
| HTTP方法 | uri | 描述 |
|----|----|----|
| POST | path/v1/book | 新增书籍信息 |
| DELETE | path/v1/book | 删除书籍信息 |
| PUT | path/v1/book | 全量更新书籍信息 |
| DISPATCH | path/v1/book | 更新书籍部分信息 |
| GET | path/v1/book | 获取书籍信息 |
| POST | path/v2/book | 新增书籍信息新接口 |

&emsp;&emsp;所以这样一些变得很自然，这样新的工程师来接手你的项目是，你告诉他，接口是完全rest规范的。如果他了解rest规范，那将变得基本没有成本；即使他不了解，也可以很快的了解rest规范是什么，避免了去读你自定义的看似完善，其实冗长杂乱的文档。

&emsp;&emsp;好的，小结一下rest规范，通俗理解就是使用HTTP的不同标准方法来完成同一个资源不同请求，而不用我们添加方法前缀。
    


